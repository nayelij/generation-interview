{"version":3,"sources":["Store.js","StoreList.js","YourComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["Store","props","state","stores","onClick","click","this","name","key","Component","StoreList","map","u","func","id","YourComponent","onMarkerClick","marker","e","setState","count","selectedPlace","activeMarker","showingInfoWindow","concat","onListClick","bind","filteredItems","filter","store","Address","Geocode","fromAddress","then","response","results","geometry","location","lat","lng","console","log","error","Container","Row","Col","md","className","google","initialCenter","style","width","height","zoom","data","storesList","Name","title","position","GoogleApiWrapper","apiKey","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","Item","Divider","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1b13dd2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Store extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n      stores: []\n    };\n  }\n\n  render () {\n    return (\n     \n      <li onClick={() => this.props.click(this.props)}\n      key={this.props.key}>\n        {this.props.name} \n      </li>\n  \n    );\n  }\n}\n\nexport default Store;","import React, { Component } from 'react'\nimport Store from './Store'\n\n\nclass StoreList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n      stores: []\n    };\n  }\n  render () {\n    return (\n        <ul>\n          <h1>MY FAVORITE STORES</h1>\n          {this.props.stores.map(u => {\n            return (\n              <Store\n                key={u.id}\n                name={u.name}\n                click={this.props.func}\n              />\n        \n            );\n          })}\n        </ul>\n    );\n  }\n}\n\nexport default StoreList;","import React, { Component } from 'react';\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport Geocode from \"react-geocode\";\nimport  './YourComponent.css';\nimport StoreList from './StoreList';\nimport data from './store_directory.json';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nexport  class YourComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 1,\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      stores: []\n    };\n    this.onListClick = this.onListClick.bind(this);\n    \n  }\n \n  onMarkerClick = (props, marker, e) =>\n  this.setState({\n    count: this.state.count +1,\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true,\n    stores: this.state.stores.concat([{id: this.state.count , name: props.name}])\n  });\n  \n  onListClick(props) {\n    var filteredItems =  this.state.stores.filter(function (store) {\n      return (store.name !== props.name);\n    });\n    this.setState({\n      stores: filteredItems\n    });\n}\n\ngetGeocode(Address) {\n\tGeocode.fromAddress(Address).then(\n    response => {\n      const { lat, lng } = response.results[0].geometry.location;\n      console.log({'lat':lat,'long':lng});\n    },\n    error => {\n      console.error(error);\n    }\n  );\n}\n  render() { \n    return (   \n    <div >       \n      <Container>\n        <Row>\n        <Col  md=\"auto\">\n            <ul className='theList'>\n              <StoreList stores={this.state.stores} func={this.onListClick}/>\n            </ul>\n          </Col>\n          <Col  md=\"auto\">\n              <Map google={this.props.google}\n                  initialCenter={{lat:  19.51, lng: -99.32}}\n                  style={{width: '50%', height: '80%'}}\n                  className={'map'}\n                  zoom={10}>\n              {data.map(storesList => \n                  <Marker onClick={this.onMarkerClick}\n                              name={storesList.Name}\n                              title={storesList.Name}\n                              position={{lat:storesList.lat,lng:storesList.lng}} />)}\n                </Map>\n          </Col>\n         \n          \n          \n        </Row>\n      </Container>            \n           \n    </div>\n    \n     \n    );\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyC8Egm7HKPBDCTJqlWAR5QHKIL76nNYRqk')\n})(YourComponent)","\nimport React, { Component } from 'react';\nimport './App.css';\nimport YourComponent from './YourComponent';\nimport {Navbar,Container,NavDropdown,Nav,Row } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Container>\n            <Navbar.Brand href=\"#home\">MY FAVORITE STORES</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"me-auto\">\n                <Nav.Link href=\"#home\">Home</Nav.Link>\n                <Nav.Link href=\"#link\">Link</Nav.Link>\n                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                  <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                  <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                  <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                  <NavDropdown.Divider />\n                  <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                </NavDropdown>\n              </Nav>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n        \n            <YourComponent/>\n         \n\t\t    \n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}